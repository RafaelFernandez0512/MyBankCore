//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoreWebServices.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class coredbEntities : DbContext
    {
        public coredbEntities()
            : base("name=coredbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TLSCliente> TLSClientes { get; set; }
        public virtual DbSet<TLSCuenta> TLSCuentas { get; set; }
        public virtual DbSet<TLSEmpleado> TLSEmpleadoes { get; set; }
        public virtual DbSet<TLSMovimiento> TLSMovimientos { get; set; }
        public virtual DbSet<TLSTransaccion> TLSTransaccions { get; set; }
        public virtual DbSet<TLSUsuario> TLSUsuarios { get; set; }
        public virtual DbSet<Log4Core> Log4Core { get; set; }
    
        public virtual int DeleteCliente(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCliente", cedulaParameter);
        }
    
        public virtual int DeleteCuenta(Nullable<int> numeroCuenta)
        {
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("numeroCuenta", numeroCuenta) :
                new ObjectParameter("numeroCuenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCuenta", numeroCuentaParameter);
        }
    
        public virtual int DeleteEmpleado(Nullable<long> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmpleado", cedulaParameter);
        }
    
        public virtual int DeleteUsuario(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsuario", cedulaParameter);
        }
    
        public virtual int InsertCliente(string nombre, string apellido, string email, Nullable<System.DateTime> fecha, string empresaTrabajo, string puestoTrabajo, Nullable<double> sueldo, Nullable<int> cuenta, Nullable<long> cedula, string sexo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var empresaTrabajoParameter = empresaTrabajo != null ?
                new ObjectParameter("EmpresaTrabajo", empresaTrabajo) :
                new ObjectParameter("EmpresaTrabajo", typeof(string));
    
            var puestoTrabajoParameter = puestoTrabajo != null ?
                new ObjectParameter("PuestoTrabajo", puestoTrabajo) :
                new ObjectParameter("PuestoTrabajo", typeof(string));
    
            var sueldoParameter = sueldo.HasValue ?
                new ObjectParameter("Sueldo", sueldo) :
                new ObjectParameter("Sueldo", typeof(double));
    
            var cuentaParameter = cuenta.HasValue ?
                new ObjectParameter("cuenta", cuenta) :
                new ObjectParameter("cuenta", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCliente", nombreParameter, apellidoParameter, emailParameter, fechaParameter, empresaTrabajoParameter, puestoTrabajoParameter, sueldoParameter, cuentaParameter, cedulaParameter, sexoParameter);
        }
    
        public virtual int InsertCuenta(Nullable<int> numeroCuenta, Nullable<long> cedula, Nullable<double> balance, string tipoCuenta, Nullable<System.DateTime> fechaActualizacion)
        {
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("numeroCuenta", numeroCuenta) :
                new ObjectParameter("numeroCuenta", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var tipoCuentaParameter = tipoCuenta != null ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(string));
    
            var fechaActualizacionParameter = fechaActualizacion.HasValue ?
                new ObjectParameter("FechaActualizacion", fechaActualizacion) :
                new ObjectParameter("FechaActualizacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCuenta", numeroCuentaParameter, cedulaParameter, balanceParameter, tipoCuentaParameter, fechaActualizacionParameter);
        }
    
        public virtual int InsertEmpleados(string nombre, string apellido, string email, Nullable<long> cedula, Nullable<System.DateTime> fecha, Nullable<int> idDepartamento, string puesto, string horario, Nullable<double> sueldo, string perfil, string sexo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var horarioParameter = horario != null ?
                new ObjectParameter("Horario", horario) :
                new ObjectParameter("Horario", typeof(string));
    
            var sueldoParameter = sueldo.HasValue ?
                new ObjectParameter("Sueldo", sueldo) :
                new ObjectParameter("Sueldo", typeof(double));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmpleados", nombreParameter, apellidoParameter, emailParameter, cedulaParameter, fechaParameter, idDepartamentoParameter, puestoParameter, horarioParameter, sueldoParameter, perfilParameter, sexoParameter);
        }
    
        public virtual int InsertLogs(string thread, string message, string exception)
        {
            var threadParameter = thread != null ?
                new ObjectParameter("Thread", thread) :
                new ObjectParameter("Thread", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("Exception", exception) :
                new ObjectParameter("Exception", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLogs", threadParameter, messageParameter, exceptionParameter);
        }
    
        public virtual int InsertMovimientoTransaccion(Nullable<double> montoTransaccion, Nullable<int> iDCuentaEmisor, Nullable<int> iDCuentaReceptor, string informacion)
        {
            var montoTransaccionParameter = montoTransaccion.HasValue ?
                new ObjectParameter("MontoTransaccion", montoTransaccion) :
                new ObjectParameter("MontoTransaccion", typeof(double));
    
            var iDCuentaEmisorParameter = iDCuentaEmisor.HasValue ?
                new ObjectParameter("IDCuentaEmisor", iDCuentaEmisor) :
                new ObjectParameter("IDCuentaEmisor", typeof(int));
    
            var iDCuentaReceptorParameter = iDCuentaReceptor.HasValue ?
                new ObjectParameter("IDCuentaReceptor", iDCuentaReceptor) :
                new ObjectParameter("IDCuentaReceptor", typeof(int));
    
            var informacionParameter = informacion != null ?
                new ObjectParameter("Informacion", informacion) :
                new ObjectParameter("Informacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMovimientoTransaccion", montoTransaccionParameter, iDCuentaEmisorParameter, iDCuentaReceptorParameter, informacionParameter);
        }
    
        public virtual int InsertTransaccion(Nullable<double> montoTransaccion, Nullable<int> iDCuentaEmisor, Nullable<int> iDCuentaReceptor, string tipoTransaccion)
        {
            var montoTransaccionParameter = montoTransaccion.HasValue ?
                new ObjectParameter("MontoTransaccion", montoTransaccion) :
                new ObjectParameter("MontoTransaccion", typeof(double));
    
            var iDCuentaEmisorParameter = iDCuentaEmisor.HasValue ?
                new ObjectParameter("IDCuentaEmisor", iDCuentaEmisor) :
                new ObjectParameter("IDCuentaEmisor", typeof(int));
    
            var iDCuentaReceptorParameter = iDCuentaReceptor.HasValue ?
                new ObjectParameter("IDCuentaReceptor", iDCuentaReceptor) :
                new ObjectParameter("IDCuentaReceptor", typeof(int));
    
            var tipoTransaccionParameter = tipoTransaccion != null ?
                new ObjectParameter("TipoTransaccion", tipoTransaccion) :
                new ObjectParameter("TipoTransaccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTransaccion", montoTransaccionParameter, iDCuentaEmisorParameter, iDCuentaReceptorParameter, tipoTransaccionParameter);
        }
    
        public virtual int InsertUsuario(string username, string contraseña, string email, Nullable<long> cedula, string tipoCuenta, Nullable<System.DateTime> fecha)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var tipoCuentaParameter = tipoCuenta != null ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUsuario", usernameParameter, contraseñaParameter, emailParameter, cedulaParameter, tipoCuentaParameter, fechaParameter);
        }
    
        public virtual int UpdateCliente(string nombre, string apellido, string email, Nullable<System.DateTime> fecha, string empresaTrabajo, string puestoTrabajo, Nullable<double> sueldo, Nullable<int> cuenta, Nullable<long> cedula)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var empresaTrabajoParameter = empresaTrabajo != null ?
                new ObjectParameter("EmpresaTrabajo", empresaTrabajo) :
                new ObjectParameter("EmpresaTrabajo", typeof(string));
    
            var puestoTrabajoParameter = puestoTrabajo != null ?
                new ObjectParameter("PuestoTrabajo", puestoTrabajo) :
                new ObjectParameter("PuestoTrabajo", typeof(string));
    
            var sueldoParameter = sueldo.HasValue ?
                new ObjectParameter("Sueldo", sueldo) :
                new ObjectParameter("Sueldo", typeof(double));
    
            var cuentaParameter = cuenta.HasValue ?
                new ObjectParameter("cuenta", cuenta) :
                new ObjectParameter("cuenta", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCliente", nombreParameter, apellidoParameter, emailParameter, fechaParameter, empresaTrabajoParameter, puestoTrabajoParameter, sueldoParameter, cuentaParameter, cedulaParameter);
        }
    
        public virtual int UpdateCuenta(Nullable<int> numeroCuenta, Nullable<long> cedula, Nullable<double> balance, string tipoCuenta, Nullable<System.DateTime> fechaActualizacion)
        {
            var numeroCuentaParameter = numeroCuenta.HasValue ?
                new ObjectParameter("numeroCuenta", numeroCuenta) :
                new ObjectParameter("numeroCuenta", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var tipoCuentaParameter = tipoCuenta != null ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(string));
    
            var fechaActualizacionParameter = fechaActualizacion.HasValue ?
                new ObjectParameter("FechaActualizacion", fechaActualizacion) :
                new ObjectParameter("FechaActualizacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCuenta", numeroCuentaParameter, cedulaParameter, balanceParameter, tipoCuentaParameter, fechaActualizacionParameter);
        }
    
        public virtual int UpdateEmpleados(string nombre, string apellido, string email, Nullable<long> cedula, Nullable<System.DateTime> fecha, Nullable<int> idDepartamento, string puesto, string horario, Nullable<double> sueldo, string perfil)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var horarioParameter = horario != null ?
                new ObjectParameter("Horario", horario) :
                new ObjectParameter("Horario", typeof(string));
    
            var sueldoParameter = sueldo.HasValue ?
                new ObjectParameter("Sueldo", sueldo) :
                new ObjectParameter("Sueldo", typeof(double));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmpleados", nombreParameter, apellidoParameter, emailParameter, cedulaParameter, fechaParameter, idDepartamentoParameter, puestoParameter, horarioParameter, sueldoParameter, perfilParameter);
        }
    
        public virtual int UpdateUsuario(string username, string contraseña, string email, Nullable<long> cedula, string tipoCuenta, Nullable<System.DateTime> fecha)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(long));
    
            var tipoCuentaParameter = tipoCuenta != null ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUsuario", usernameParameter, contraseñaParameter, emailParameter, cedulaParameter, tipoCuentaParameter, fechaParameter);
        }
    }
}
